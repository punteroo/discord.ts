"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9970],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2324:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],i={},p="@SlashOption",s={unversionedId:"decorators/commands/slashoption",id:"decorators/commands/slashoption",title:"@SlashOption",description:"A slash command can have multiple options (parameters)",source:"@site/docs/decorators/commands/slashoption.md",sourceDirName:"decorators/commands",slug:"/decorators/commands/slashoption",permalink:"/docs/decorators/commands/slashoption",editUrl:"https://github.com/oceanroleplay/discord.ts/edit/main/docs/docs/decorators/commands/slashoption.md",tags:[],version:"current",lastUpdatedBy:"oceanroleplay",lastUpdatedAt:1644563592,formattedLastUpdatedAt:"2/11/2022",frontMatter:{},sidebar:"docSidebar",previous:{title:"@SlashGroup",permalink:"/docs/decorators/commands/slashgroup"},next:{title:"@SimpleCommand",permalink:"/docs/decorators/commands/simplecommand"}},c=[{value:"Declare an option",id:"declare-an-option",children:[],level:2},{value:"Autocomplete option",id:"autocomplete-option",children:[],level:2},{value:"Automatic typing",id:"automatic-typing",children:[],level:2},{value:"Manual typing",id:"manual-typing",children:[],level:2},{value:"Type inference",id:"type-inference",children:[],level:2},{value:"Signature",id:"signature",children:[],level:2},{value:"Parameters",id:"parameters",children:[{value:"name",id:"name",children:[],level:3},{value:"params",id:"params",children:[{value:"<code>autocomplete</code>",id:"autocomplete",children:[],level:4},{value:"<code>Description</code>",id:"description",children:[],level:4},{value:"<code>Required</code>",id:"required",children:[],level:4},{value:"<code>Type</code>",id:"type",children:[],level:4},{value:"<code>channelTypes</code>",id:"channeltypes",children:[],level:4}],level:3}],level:2},{value:"Autocompletion (Option&#39;s choices)",id:"autocompletion-options-choices",children:[],level:2},{value:"Option order",id:"option-order",children:[],level:2}],m={toc:c};function d(e){var t=e.components,i=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"slashoption"},"@SlashOption"),(0,o.kt)("p",null,"A slash command can have multiple options (parameters)"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"query is an option in this image")),(0,o.kt)("p",null,(0,o.kt)("img",{src:n(931).Z,width:"371",height:"142"})),(0,o.kt)("h2",{id:"declare-an-option"},"Declare an option"),(0,o.kt)("p",null,"To declare an option you simply use the ",(0,o.kt)("inlineCode",{parentName:"p"},"@SlashOption")," decorator before a method parameter"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'@Discord()\nclass DiscordBot {\n  @Slash("add")\n  add(\n    @SlashOption("x", { description: "x value" })\n    x: number,\n    @SlashOption("y", { description: "y value" })\n    y: number,\n\n    interaction: CommandInteraction\n  ) {\n    interaction.reply(String(x + y));\n  }\n}\n')),(0,o.kt)("h2",{id:"autocomplete-option"},"Autocomplete option"),(0,o.kt)("p",null,"When defining an autocomplete slash option, you can define a resolver for autocomplete inside ",(0,o.kt)("inlineCode",{parentName:"p"},"@SlashOption")," to simplify things. If you set autocomplete to true, you have to handle it manually in your main function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'@Discord()\nclass DiscordBot {\n  @Slash("autocomplete")\n  testx(\n    @SlashOption("aoption", {\n      autocomplete: true,\n      type: "STRING",\n    })\n    searchText: string,\n    @SlashOption("boption", {\n      autocomplete: function myResolver(\n        this: AppDiscord1,\n        interaction: AutocompleteInteraction\n      ) {\n        // normal function, have this, so class reference is passed\n        console.log(this.myCustomText);\n        // resolver for option b\n        interaction.respond([\n          { name: "option c", value: "d" },\n          { name: "option d", value: "c" },\n        ]);\n      },\n      type: "STRING",\n    })\n    searchText2: string,\n    @SlashOption("coption", {\n      autocomplete: (interaction: AutocompleteInteraction) => {\n        // arrow function does not have this, so class reference is not available\n        interaction.respond([\n          { name: "option e", value: "e" },\n          { name: "option f", value: "f" },\n        ]);\n      },\n      type: "STRING",\n    })\n    searchText3: string,\n    interaction: CommandInteraction | AutocompleteInteraction\n  ): void {\n    // autocomplete will passed to function if not handle above\n    if (interaction.isAutocomplete()) {\n      const focusedOption = interaction.options.getFocused(true);\n      // resolver for option a\n      if (focusedOption.name === "aoption") {\n        interaction.respond([\n          { name: "option a", value: "a" },\n          { name: "option b", value: "b" },\n        ]);\n      }\n    } else {\n      interaction.reply(`${searchText}-${searchText2}-${searchText3}`);\n    }\n  }\n}\n')),(0,o.kt)("h2",{id:"automatic-typing"},"Automatic typing"),(0,o.kt)("p",null,"An option infer the type from TypeScript in this example, discord.",(0,o.kt)("strong",{parentName:"p"},"ts")," knows that your options are both ",(0,o.kt)("inlineCode",{parentName:"p"},"number")," because you typed the parameters"),(0,o.kt)("p",null,"discord.",(0,o.kt)("strong",{parentName:"p"},"ts")," convert automatically the infered type into discord.",(0,o.kt)("strong",{parentName:"p"},"js")," options types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'@Discord()\nclass DiscordBot {\n  @Slash("add")\n  add(\n    @SlashOption("x", { description: "x value" })\n    x: number,\n    @SlashOption("y", { description: "y value" })\n    y: number,\n    interaction: CommandInteraction\n  ) {\n    interaction.reply(String(x + y));\n  }\n}\n')),(0,o.kt)("h2",{id:"manual-typing"},"Manual typing"),(0,o.kt)("p",null,"If you want to specify the type manually you can do it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { TextChannel, VoiceChannel, CommandInteraction } from "discord.js";\n\n@Discord()\nclass DiscordBot {\n  @Slash("getID")\n  getID(\n    @SlashOption("x", { type: "MENTIONABLE" })\n    mentionable: GuildMember | User | Role,\n    interaction: CommandInteraction\n  ) {\n    interaction.reply(mentionable.id);\n  }\n}\n')),(0,o.kt)("h2",{id:"type-inference"},"Type inference"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"STRING"'),"\n",(0,o.kt)("strong",{parentName:"p"},"Infered from ",(0,o.kt)("inlineCode",{parentName:"strong"},"String"))),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SlashOption("x")\n  channel: string,\n)\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"BOOLEAN"'),"\n",(0,o.kt)("strong",{parentName:"p"},"Infered from ",(0,o.kt)("inlineCode",{parentName:"strong"},"Boolean"))),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SlashOption("x")\n  channel: boolean,\n)\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"NUMBER"'),"\n",(0,o.kt)("strong",{parentName:"p"},"Infered from ",(0,o.kt)("inlineCode",{parentName:"strong"},"Number"))),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SlashOption("x")\n  channel: number,\n)\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"ROLE"'),"\n",(0,o.kt)("strong",{parentName:"p"},"Infered from ",(0,o.kt)("inlineCode",{parentName:"strong"},"Role"))),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SlashOption("x")\n  channel: Role,\n)\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"USER"'),"\n",(0,o.kt)("strong",{parentName:"p"},"Infered from ",(0,o.kt)("inlineCode",{parentName:"strong"},"User")," | ",(0,o.kt)("inlineCode",{parentName:"strong"},"GuildMember")," (you will recieve GuildMember if present otherwise User)")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SlashOption("x")\n  channel: User,\n)\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"CHANNEL"'),"\n",(0,o.kt)("strong",{parentName:"p"},"Infered from ",(0,o.kt)("inlineCode",{parentName:"strong"},"Channel")," (or ",(0,o.kt)("inlineCode",{parentName:"strong"},"TextChannel")," / ",(0,o.kt)("inlineCode",{parentName:"strong"},"VoiceChannel"),", not recommended)")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SlashOption("x")\n  channel: Channel,\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"MENTIONABLE"'),"\n",(0,o.kt)("strong",{parentName:"p"},"No inference, use:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'fn(\n  @SlashOption("x", { type: "MENTIONABLE" })\n  channel: GuildMember | User | Role,\n)\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"INTEGER"'),"\nNo inference, use ",(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/commands/slashoption"},"@SlashOption"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"SUB_COMMAND"'),"\nNo inference, use ",(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/commands/slashgroup"},"@SlashGroup"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'"SUB_COMMAND_GROUP"'),"\nNo inference, use ",(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/commands/slashgroup"},"@SlashGroup")))),(0,o.kt)("h2",{id:"signature"},"Signature"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"SlashOption(name: string);\nSlashOption(\n  name: string,\n  params?: SlashOptionParams\n)\n")),(0,o.kt)("h2",{id:"parameters"},"Parameters"),(0,o.kt)("h3",{id:"name"},"name"),(0,o.kt)("p",null,"Define name of this option"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default"),(0,o.kt)("th",{parentName:"tr",align:null},"required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,o.kt)("h3",{id:"params"},"params"),(0,o.kt)("p",null,"Multiple options, check below."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default"),(0,o.kt)("th",{parentName:"tr",align:null},"required"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"object"),(0,o.kt)("td",{parentName:"tr",align:null},"undefined"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("h4",{id:"autocomplete"},(0,o.kt)("inlineCode",{parentName:"h4"},"autocomplete")),(0,o.kt)("p",null,"Enable autocomplete interactions for this option\n| type | default |\n| -------------------------------- | ------- |\n| boolean ","|"," autocomplete resolver | false |"),(0,o.kt)("h4",{id:"description"},(0,o.kt)("inlineCode",{parentName:"h4"},"Description")),(0,o.kt)("p",null,"Set description of this option"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"OPTION_NAME - OPTION_TYPE")))),(0,o.kt)("h4",{id:"required"},(0,o.kt)("inlineCode",{parentName:"h4"},"Required")),(0,o.kt)("p",null,"Set option required or optional"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"true")))),(0,o.kt)("h4",{id:"type"},(0,o.kt)("inlineCode",{parentName:"h4"},"Type")),(0,o.kt)("p",null,"Define type of your command option"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"STRING ","|"," INTEGER ","|"," NUMBER ","|"," BOOLEAN ","|"," USER ","|"," CHANNEL ","|"," ROLE ","|"," MENTIONABLE"),(0,o.kt)("td",{parentName:"tr",align:null},"inference")))),(0,o.kt)("h4",{id:"channeltypes"},(0,o.kt)("inlineCode",{parentName:"h4"},"channelTypes")),(0,o.kt)("p",null,"If the option is a channel type, the channels shown will be restricted to these types"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Exclude<ChannelTypes, ChannelTypes.UNKNOWN>[]"),(0,o.kt)("td",{parentName:"tr",align:null},"undefined")))),(0,o.kt)("h2",{id:"autocompletion-options-choices"},"Autocompletion (Option's choices)"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("a",{parentName:"p",href:"/docs/decorators/commands/slashchoice"},"@SlashChoice")," decorator"),(0,o.kt)("h2",{id:"option-order"},"Option order"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"You have to put required options before optional ones"),(0,o.kt)("br",{parentName:"p"}),"\n","Or you will get this error:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(node:64399) UnhandledPromiseRejectionWarning: DiscordAPIError: Invalid Form Body\noptions[1]: Required options must be placed before non-required options\n")))}d.isMDXComponent=!0},931:function(e,t,n){t.Z=n.p+"assets/images/options-79266824b5d8948f58f07d46a94b1b5d.png"}}]);