"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5274],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,g=d["".concat(i,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var u=2;u<r;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7322:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),s=["components"],l={title:"Readme"},i="<div>",u={unversionedId:"packages/music/README",id:"packages/music/README",title:"Readme",description:'<a href="https://discord.gg/yHQY9fexH9"',source:"@site/docs/packages/music/README.md",sourceDirName:"packages/music",slug:"/packages/music/",permalink:"/docs/packages/music/",editUrl:"https://github.com/oceanroleplay/discord.ts/edit/main/docs/docs/packages/music/README.md",tags:[],version:"current",frontMatter:{title:"Readme"},sidebar:"packagesSidebar",previous:{title:"VoiceStateUpdate",permalink:"/docs/packages/lava-player/api/interfaces/VoiceStateUpdate"},next:{title:"Exports",permalink:"/docs/packages/music/api/"}},c=[],p={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:""}),(0,r.kt)("div",null,(0,r.kt)("p",{align:"center"},(0,r.kt)("a",{href:"https://discord-ts.js.org",target:"_blank",rel:"nofollow"},(0,r.kt)("img",{src:"https://discord-ts.js.org/discord-ts.svg",width:"546"}))),(0,r.kt)("p",{align:"center"},(0,r.kt)("a",{href:"https://discord.gg/yHQY9fexH9"},(0,r.kt)("img",{src:"https://img.shields.io/discord/874802018361950248?color=5865F2&logo=discord&logoColor=white",alt:"Discord server"})),(0,r.kt)("a",{href:"https://www.npmjs.com/package/@discordx/music"},(0,r.kt)("img",{src:"https://img.shields.io/npm/v/@discordx/music.svg?maxAge=3600",alt:"NPM version"})),(0,r.kt)("a",{href:"https://www.npmjs.com/package/@discordx/music"},(0,r.kt)("img",{src:"https://img.shields.io/npm/dt/@discordx/music.svg?maxAge=3600",alt:"NPM downloads"})),(0,r.kt)("a",{href:"https://github.com/oceanroleplay/discord.ts/actions"},(0,r.kt)("img",{src:"https://github.com/oceanroleplay/discord.ts/workflows/Build/badge.svg",alt:"Build status"})),(0,r.kt)("a",{href:"https://www.paypal.me/vijayxmeena"},(0,r.kt)("img",{src:"https://img.shields.io/badge/donate-paypal-F96854.svg",alt:"paypal"}))),(0,r.kt)("p",{align:"center"},(0,r.kt)("b",null," Create a discord bot with TypeScript and Decorators! "))),(0,r.kt)("h1",{id:"-introduction"},"\ud83d\udcd6 Introduction"),(0,r.kt)("p",null,"A powerful discord music library written in ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org"},"TypeScript")," for ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org"},"Node.js"),". Support youtube/spotify songs and playlist."),(0,r.kt)("h1",{id:"-installation"},"\ud83d\udcbb Installation"),(0,r.kt)("p",null,"Version 16.6.0 or newer of Node.js is required"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Ensure that ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/discord.js"},"discord.js")," and ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@discordjs/voice"},"@discordjs/voice")," have been installed before installing this library")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install @discordx/music\nyarn add @discordx/music\n")),(0,r.kt)("h1",{id:"-bot-examples"},"\ud83e\udd16 Bot Examples"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/oceanroleplay/discord-music-bot"},"discord-music-bot"))," from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/oceanroleplay"},"@oceanroleplay"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note:")," Create a pull request to include your bot in the example list."),(0,r.kt)("h1",{id:"define-new-player"},"Define new player"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const player = new Player();\n")),(0,r.kt)("h1",{id:"get-queue-for-guild"},"Get queue for guild"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const queue = player.queue(interaction.guild);\n")),(0,r.kt)("h1",{id:"join-voice-server"},"Join voice server"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await queue.join(interaction.member.voice.channel);\n")),(0,r.kt)("h1",{id:"play-youtube-song"},"Play youtube song"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const status = await queue.play(songName);\nif (!status) {\n  interaction.followUp("The song could not be found");\n} else {\n  interaction.followUp("The requested song is being played");\n}\n')),(0,r.kt)("h1",{id:"play-youtube-playlist"},"Play youtube playlist"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const status = await queue.playlist(playlistLink);\nif (!status) {\n  interaction.followUp("The playlist could not be found");\n} else {\n  interaction.followUp("playing requested playlist");\n}\n')),(0,r.kt)("h1",{id:"play-spotify-songplaylist"},"Play spotify song/playlist"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const status = await queue.spotify(spotifyLink);\nif (!status) {\n  interaction.followUp("The spotify song/playlist could not be found");\n} else {\n  interaction.followUp("The requested spotify song/playlist is being played");\n}\n')),(0,r.kt)("h1",{id:"get-voice-config-data"},"Get voice config data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const audioPlayer = queue.audioPlayer;\nconst voiceConnection = queue.voiceConnection;\nconst voiceChannelId = queue.voiceChannelId;\nconst voiceGroup = queue.voiceGroup;\nconst voiceGuildId = queue.voiceGuildId;\n")),(0,r.kt)("h1",{id:"get-tracks"},"Get tracks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const tracks = queue.tracks;\n")),(0,r.kt)("h1",{id:"get-loop-mode"},"Get loop mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const state = queue.loop;\n")),(0,r.kt)("h1",{id:"set-loop-mode"},"Set loop mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.setLoop(true | false);\n")),(0,r.kt)("h1",{id:"get-repeat-mode"},"Get repeat mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const state = queue.repeat;\n")),(0,r.kt)("h1",{id:"set-repeat-mode"},"Set repeat mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.setRepeat(true | false);\n")),(0,r.kt)("h1",{id:"pause-music"},"Pause music"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.pause();\n")),(0,r.kt)("h1",{id:"resume-music"},"Resume music"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.resume();\n")),(0,r.kt)("h1",{id:"skip-music"},"Skip music"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.skip();\n")),(0,r.kt)("h1",{id:"leave-voice-channel"},"Leave voice channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.leave();\n")),(0,r.kt)("h1",{id:"mixshuffle-tracks"},"Mix/Shuffle tracks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.mix();\n")),(0,r.kt)("h1",{id:"get-playback-duration"},"Get playback duration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.playbackDuration;\n")),(0,r.kt)("h1",{id:"get-volume"},"Get volume"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.volume;\n")),(0,r.kt)("h1",{id:"set-volume"},"Set volume"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.setVolume(volume: number);\n")),(0,r.kt)("h1",{id:"seek-current-track"},"Seek current track"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.seek(time: number);\n")),(0,r.kt)("h1",{id:"clear-queue"},"Clear queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.clearTracks();\n")),(0,r.kt)("h1",{id:"remove-specific-tracks"},"Remove specific tracks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"queue.removeTracks([1, 3, 5]);\n")),(0,r.kt)("h1",{id:"get-total-tracks"},"Get total tracks"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const total = queue.size;\n")),(0,r.kt)("h1",{id:"events"},"Events"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'this.player.on("onError", console.log);\nthis.player.on("onFinish", console.log);\nthis.player.on("onStart", console.log);\nthis.player.on("onLoop", console.log);\nthis.player.on("onFinishPlayback", console.log);\nthis.player.on("onRepeat", console.log);\nthis.player.on("onSkip", console.log);\nthis.player.on("onPause", console.log);\nthis.player.on("onResume", console.log);\nthis.player.on("onTrackAdd", console.log);\nthis.player.on("onLoopEnabled", console.log);\nthis.player.on("onLoopDisabled", console.log);\nthis.player.on("onRepeatEnabled", console.log);\nthis.player.on("onRepeatDisabled", console.log);\nthis.player.on("onMix", console.log);\nthis.player.on("onVolumeUpdate", console.log);\nthis.player.on("onSeek", console.log);\nthis.player.on("onJoin", console.log);\nthis.player.on("onLeave", console.log);\n')),(0,r.kt)("h1",{id:"custom-queue"},"Custom queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'class MyQueue extends Queue {\n  customProp = "custom queue";\n}\n')),(0,r.kt)("p",null,"Tell the player to use this custom queue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class MyQueue extends Queue {}\nthis.player.queue(guild, () => new MyQueue(this.player, guild));\n")),(0,r.kt)("h1",{id:"custom-player"},"Custom player"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"class MyPlayer extends Player {\n  // custom player\n}\n")),(0,r.kt)("p",null,"Let your queue know about custom player"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const myQueue: Queue<MyPlayer> = new Queue(this, guild);\n")),(0,r.kt)("h1",{id:"lava-player"},"Lava Player"),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const node = new Lava.Node({\n  host: {\n    address: process.env.LAVA_HOST ?? "",\n    port: Number(process.env.LAVA_PORT) ?? 2333,\n  },\n\n  // your Lavalink password\n  password: process.env.LAVA_PASSWORD ?? "",\n\n  send(guildId, packet) {\n    const guild = client.guilds.cache.get(guildId);\n    if (guild) {\n      guild.shard.send(packet);\n    }\n  },\n  shardCount: 0, // the total number of shards that your bot is running (optional, useful if you\'re load balancing)\n  userId: client.user?.id ?? "", // the user id of your bot\n});\n\nclient.ws.on("VOICE_STATE_UPDATE", (data: Lava.VoiceStateUpdate) => {\n  node.voiceStateUpdate(data);\n});\n\nclient.ws.on("VOICE_SERVER_UPDATE", (data: Lava.VoiceServerUpdate) => {\n  node.voiceServerUpdate(data);\n});\n')),(0,r.kt)("h1",{id:"get-guild-player"},"Get Guild Player"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const player = node.players.get("guild id");\n')),(0,r.kt)("h1",{id:"join-voice-channel"},"Join Voice Channel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'await player.join("channel id");\n')),(0,r.kt)("h1",{id:"play-track"},"Play Track"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const res = await voice.load("ytsearch:monstercat");\nawait player.play(res.tracks[0]);\n')),(0,r.kt)("h1",{id:"stop-music"},"Stop Music"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"await player.stop();\n// or, to destroy the player entirely\nawait player.destroy();\n")),(0,r.kt)("h1",{id:"clustering"},"Clustering"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"const cluster = new Lava.Cluster({\n  nodes: [\n    // node options here; see above\n  ],\n  send(guildId, packet) {\n    // send to gateway; same as for single node usage\n  },\n  filter(node, guildId) {\n    // optional\n    // return a boolean indicating whether the given guild can be run on the given node\n    // useful for limiting guilds to specific nodes (for instance, if you setup lavalink edge servers to minimize latency)\n    // this must return true at least once for a given set of nodes, otherwise some methods may error\n  },\n});\n")),(0,r.kt)("h1",{id:"\ufe0f-need-help"},"\u260e\ufe0f Need help?"),(0,r.kt)("p",null,"Ask in ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://discord.gg/yHQY9fexH9"},"discord server"))," or open a ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/oceanroleplay/discord.ts/issues"},"issue"))),(0,r.kt)("h1",{id:"thank-you"},"Thank you"),(0,r.kt)("p",null,"Show your support for ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/discordx"},"discordx")," by giving us a star on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/oceanroleplay/discord.ts"},"github"),"."))}d.isMDXComponent=!0}}]);